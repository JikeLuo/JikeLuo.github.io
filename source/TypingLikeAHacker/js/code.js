export const text = [
    '#include "zend.h"', '\n',
    '#include "zend_extensions.h"', '\n',
    '#include "php_ini.h"', '\n',
    '#include "php_globals.h"', '\n',
    '#include "php_main.h"', '\n',
    '#include "fopen_wrappers.h"', '\n',
    '#include "http_status_codes.h"', '\n',
    '#include "ext/standard/php_standard.h"', '\n',
    '#include "ext/standard/dl_arginfo.h"', '\n',
    '#include "ext/standard/url.h"', '\n',
    'public class EditTextDialogBuilder extends AlertDialog.Builder implements EditText.OnEditorActionListener ', '\n',
    '{', '\n',
    '   private final TextInputLayout mTextInputLayout;', '\n',
    '   private final EditText mEditText;', '\n',
    '   private AlertDialog mDialog;', '\n',
    '}', '\n',
    '\n',
    '\n',
    'static size_t sapi_fcgi_ub_write(const char *str, size_t str_length)', '\n',
    '{', '\n',
    '   const char *ptr = str;', '\n',
    '   size_t remaining = str_length;', '\n',
    '   fcgi_request *request = (fcgi_request*) SG(server_context);', '\n',
    '   while (remaining > 0) {', '\n',
    '       int to_write = remaining > INT_MAX ? INT_MAX : (int)remaining;', '\n',
    '       int ret = fcgi_write(request, FCGI_STDOUT, ptr, to_write);', '\n',
    '       if (ret <= 0) {', '\n',
    '           php_handle_aborted_connection();', '\n',
    '           return str_length - remaining;', '\n',
    '       }', '\n',
    '       ptr += ret;', '\n',
    '       remaining -= ret;', '\n',
    '   }', '\n',
    '   return str_length;', '\n',
    '}', '\n',
    '\n',
    '\n',
    '@SuppressLint("InflateParams")', '\n',
    'public EditTextDialogBuilder(Context context, String text, String hint) ', '\n',
    '{', '\n',
    '    super(context);', '\n',
    '    View view = LayoutInflater.from(getContext()).inflate(R.layout.dialog_edittext_builder, null);', '\n',
    '    setView(view);', '\n',
    '    mTextInputLayout = (TextInputLayout) view;', '\n',
    '    mEditText = (EditText) view.findViewById(R.id.edit_text);', '\n',
    '    mEditText.setText(text);', '\n',
    '}', '\n',
    '\n',
    '\n',
    'phpize_clean()', '\n',
    '{', '\n',
    '   echo "Cleaning.."', '\n',
    '   for i in $CLEAN_FILES; do', '\n',
    '       if test -f "$i"; then', '\n',
    '           rm -f $i', '\n',
    '       elif test -d "$i"; then', '\n',
    '           rm -rf $i', '\n',
    '       fi', '\n',
    '   done', '\n',
    '}', '\n',
    '\n',
    '\n',
    'public EditText getEditText() ', '\n',
    '{', '\n',
    '   return mEditText;', '\n',
    '}', '\n',
    '\n',
    '\n',
    'public String getText() {', '\n',
    '    return mEditText.getText().toString();', '\n',
    '}', '\n',
    '\n',
    '\n',
    'public void setError(CharSequence error) {', '\n',
    '    mTextInputLayout.setError(error);', '\n',
    '}', '\n',
    '\n',
    '\n',
    'public AlertDialog create() {', '\n',
    '    mDialog = super.create();', '\n',
    '    return mDialog;', '\n',
    '}', '\n',
    '\n',
    '\n',
    'public boolean onEditorAction(TextView v, int actionId, KeyEvent event)', '\n',
    '{', '\n',
    '    if (mDialog != null) {', '\n',
    '        Button button = mDialog.getButton(DialogInterface.BUTTON_POSITIVE);', '\n',
    '        if (button != null) {', '\n',
    '            button.performClick();', '\n',
    '        }', '\n',
    '        return true;', '\n',
    '    } else {', '\n',
    '            return false;', '\n',
    '        }', '\n',
    '    }', '\n',
    '}',
    '\n',
    '\n',
    'phpize_usage()', '\n',
    '{', '\n',
    '  echo "Usage: $0 [--clean|--help|--version|-v]"', '\n',
    '}', '\n',
    '\n',
    'phpize_no_configm4()',  '\n',
    '{', '\n',
    '  if test $@ -eq 1; then', '\n',
    '  clean=" --clean"', '\n',
    '  fi', '\n',
    '\n',
    '  echo "Cannot find config.m4. "', '\n',
    '  echo "Make sure that you run $0$clean in the top level source directory of the module"', '\n',
    '  echo', '\n',
    '}', '\n',
    '\n',
    '\n',
    'function update_lineno($offset)', '\n',
    '{', '\n',
    '    global $lines_offset, $line;', '\n',
    '    $left  = 0;', '\n',
    '    $right = $count = count($lines_offset)-1;', '\n',
    '   do {', '\n',
    '        $mid = intval(($left + $right)/2);', '\n',
    '        $val = $lines_offset[$mid];', '\n',
    '        if ($val < $offset) {', '\n',
    '            if (++$mid > $count || $lines_offset[$mid] > $offset) {', '\n',
    '                $line = $mid;', '\n',
    '                return;', '\n',
    '            } else {', '\n',
    '                $left = $mid;', '\n',
    '            }', '\n',
    '        } else if ($val > $offset) {', '\n',
    '            if ($lines_offset[--$mid] < $offset) {', '\n',
    '                $line = $mid+1;', '\n',
    '                return;', '\n',
    '            } else {', '\n',
    '                $right = $mid;', '\n',
    '            }', '\n',
    '        } else {', '\n',
    '            $line = $mid+1;', '\n',
    '            return;', '\n',
    '        }', '\n',
    '    } while (true);', '\n',
    '}', '\n',
    '\n',
    '\n',
    'static int sapi_cgi_send_headers(sapi_headers_struct *sapi_headers)', '\n',
    '{', '\n',
    '    sapi_header_struct *h;', '\n',
    '    zend_llist_position pos;', '\n',
    '    bool ignore_status = 0;', '\n',
    '    int response_status = SG(sapi_headers).http_response_code;', '\n',
    '   if (SG(request_info).no_headers == 1) ', '\n',
    '   {', '\n',
    '       return  SAPI_HEADER_SENT_SUCCESSFULLY;', '\n',
    '   }', '\n',
    '}', '\n',
    '\n',
    '\n',
    'if (CGIG(nph) || SG(sapi_headers).http_response_code != 200)', '\n',
    '{', '\n',
    '    int len;', '\n',
    '    bool has_status = 0;', '\n',
    '    char buf[SAPI_CGI_MAX_HEADER_LENGTH];', '\n',
    '    if (CGIG(rfc2616_headers) && SG(sapi_headers).http_status_line) {', '\n',
    '        char *s;', '\n',
    '        len = slprintf(buf, SAPI_CGI_MAX_HEADER_LENGTH, "%s", SG(sapi_headers).http_status_line);', '\n',
    '        if ((s = strchr(SG(sapi_headers).http_status_line, ))) {', '\n',
    '            response_status = atoi((s + 1));', '\n',
    '        }', '\n',
    '        if (len > SAPI_CGI_MAX_HEADER_LENGTH) {', '\n',
    '            len = SAPI_CGI_MAX_HEADER_LENGTH;', '\n',
    '        }', '\n',
    '    } else {', '\n',
    '        char *s;', '\n',
    '        if (SG(sapi_headers).http_status_line &&', '\n',
    '            (s = strchr(SG(sapi_headers).http_status_line, )) != 0 &&', '\n',
    '            (s - SG(sapi_headers).http_status_line) >= 5 &&', '\n',
    '            strncasecmp(SG(sapi_headers).http_status_line, "HTTP/", 5) == 0', '\n',
    '        ) {', '\n',
    '            len = slprintf(buf, sizeof(buf), "Status:%s", s);', '\n',
    '            response_status = atoi((s + 1));', '\n',
    '        } else {', '\n',
    '            h = (sapi_header_struct*)zend_llist_get_first_ex(&sapi_headers->headers, &pos);', '\n',
    '            while (h) {', '\n',
    '                if (h->header_len > sizeof("Status:")-1 &&', '\n',
    '                    strncasecmp(h->header, "Status:", sizeof("Status:")-1) == 0', '\n',
    '                ) {', '\n',
    '                    has_status = 1;', '\n',
    '                    break;', '\n',
    '                }', '\n',
    '                h = (sapi_header_struct*)zend_llist_get_next_ex(&sapi_headers->headers, &pos);', '\n',
    '            }', '\n',
    '            if (!has_status) {', '\n',
    '                http_response_status_code_pair *err = (http_response_status_code_pair*)http_status_map;', '\n',
    '                while (err->code != 0) {', '\n',
    '                    if (err->code == SG(sapi_headers).http_response_code) {', '\n',
    '                        break;', '\n',
    '                    }', '\n',
    '                    err++;', '\n',
    '                }', '\n',
    '                if (err->str) {', '\n',
    '                    len = slprintf(buf, sizeof(buf), "Status: %d %s", SG(sapi_headers).http_response_code, err->str);', '\n',
    '                } else {', '\n',
    '                    len = slprintf(buf, sizeof(buf), "Status: %d", SG(sapi_headers).http_response_code);', '\n',
    '                }', '\n',
    '            }', '\n',
    '        }', '\n',
    '    }', '\n',
    '    if (!has_status) {', '\n',
    '        PHPWRITE_H(buf, len);', '\n',
    '        PHPWRITE_H(2);', '\n',
    '        ignore_status = 1;', '\n',
    '    }', '\n',
    '}', '\n',
    '\n',
    '\n',
    'END'

]

